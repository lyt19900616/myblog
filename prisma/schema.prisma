// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts    Post[]
  comments Comment[]
  likes    Like[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id        String   @id @default(cuid())
  // 文章标题
  title     String
  // 文章内容
  content   String
  // 文章摘要
  excerpt   String?
  // 是否公开
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // 外键关联
  userId    String
  // 作者
  author    User     @relation(fields: [userId], references: [id])

  // 评论 1对多
  comments Comment[]
  // 点赞 1对多
  likes    Like[]

  // 🔥 多对多分类
  categories Category[] @relation("PostCategories")
}

model Category {
  id          String @id @default(cuid())
  // 分类名称
  name        String @unique
  // 分类描述
  description String
  // 分类下的文章
  posts       Post[] @relation("PostCategories")
}

model Comment {
  id        String   @id @default(cuid())
  // 评论内容
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // 外键关联
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  // 评论者
  userId    String
  author    User     @relation(fields: [userId], references: [id])

  parentId String?
  parent   Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  children Comment[] @relation("Comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  // 外键关联
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId]) // 防止重复点赞
}
